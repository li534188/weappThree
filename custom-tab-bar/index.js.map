{"version":3,"sources":["webpack:///./src/custom-tab-bar/index.tsx","webpack:///./src/actions/global/index.tsx","webpack:///./src/asset/brain.png","webpack:///./src/asset/community.png","webpack:///./src/asset/exercise.png","webpack:///./src/asset/meditation.png","webpack:///./src/asset/mine.png","webpack:///./src/custom-tab-bar/index.scss","webpack:///./src/custom-tab-bar/index.tsx?730e"],"names":["initData","selected","color","selectedColor","list","pagePath","iconPath","selectedIconPath","text","useState","data","setData","dispatch","useDispatch","pageIndex","useSelector","state","console","switchTab","info","e","url","Taro","actions","index","item","setIndex","type","GLOBAL","PAGEINDEX","getIndex","GETPAGEINDEX"],"mappings":"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","file":"custom-tab-bar/index.js","sourcesContent":["import React, { Component, useState  } from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Taro from '@tarojs/taro'\r\nimport { bindActionCreators } from 'redux';\r\nimport {connect, useSelector, useDispatch} from 'react-redux'\r\nimport { View, Text, Navigator, Button,CoverView, CoverImage } from '@tarojs/components'\r\nimport { AtTabBar } from 'taro-ui'\r\nimport * as  actions from '../actions/global'\r\nimport  './index.scss'\r\nimport minePng from '../asset/mine.png'\r\nimport exercisePng from '../asset/exercise.png'\r\nimport communityPng from '../asset/community.png'\r\nimport meditationPng from '../asset/meditation.png'\r\nimport brainPng from '../asset/brain.png'\r\n\r\n\r\nexport interface MyProps {\r\n  pageIndex : number,\r\n  setIndex(index:number):{}\r\n}\r\n\r\n\r\nexport interface MyState{\r\n    data:{\r\n        [propName: string]: any;\r\n    }\r\n}\r\nlet initData = {\r\n  selected: 0,\r\n  color: \"#7A7E83\",\r\n  selectedColor: \"#3cc51f\",\r\n  list: [{\r\n    pagePath: \"/pages/meditation/index\",\r\n    iconPath: meditationPng,\r\n    selectedIconPath: \"/image/icon_component_HL.png\",\r\n    text: \"冥想\"\r\n  }, {\r\n    pagePath: \"/pages/exercise/index\",\r\n    iconPath: exercisePng,\r\n    selectedIconPath: \"/image/icon_API_HL.png\",\r\n    text: \"锻炼\"\r\n  }, {\r\n    pagePath: \"/pages/brain/index\",\r\n    iconPath: brainPng,\r\n    selectedIconPath: \"/image/icon_API_HL.png\",\r\n    text: \"大脑\"\r\n  }, {\r\n    pagePath: \"/pages/community/index\",\r\n    iconPath: communityPng,\r\n    selectedIconPath: \"/image/icon_API_HL.png\",\r\n    text: \"社区\"\r\n  }, {\r\n    pagePath: \"/pages/mine/index\",\r\n    iconPath: minePng,\r\n    selectedIconPath: '../asset/mine.png',\r\n    text: \"我的\"\r\n  }]\r\n}\r\n\r\nexport default function Indexs(){\r\n  const [data, setData] = useState(initData);\r\n\r\n  const {list, selectedColor, color} = data;\r\n\r\n  const dispatch = useDispatch()\r\n  // const {pageIndex} = this.props\r\n  const pageIndex = useSelector(state=> state.global.global.pageIndex);\r\n  console.log('+++++++++++')\r\n  console.log(pageIndex)\r\n\r\n  const switchTab = (e) => {\r\n    console.log(123)\r\n    const info = e.currentTarget.dataset\r\n    const url = info.path\r\n    console.log(info)\r\n    Taro.switchTab({url})\r\n    dispatch(actions.setIndex(info.index))\r\n\r\n    setData({\r\n      ...data,selected:info.index\r\n    })\r\n\r\n    \r\n  }\r\n  return (\r\n    <CoverView className=\"tab-bar\">\r\n    <CoverView className=\"tab-bar-border\"></CoverView>\r\n\r\n    {list.map((item,index)=>(\r\n        <CoverView key={item.pagePath} className=\"tab-bar-item\" data-path={item.pagePath} data-index={index} onClick={switchTab}>\r\n            <CoverImage  className={pageIndex === index ? 'text-select' : ''}  src={item.iconPath}></CoverImage>\r\n            <CoverView style={{color:(pageIndex === index ? selectedColor : color)}}>{item.text}</CoverView>\r\n        </CoverView>\r\n    ))}\r\n</CoverView>\r\n  );\r\n}\r\n\r\n// class Index extends Component<MyProps, MyState> {\r\n  \r\n  \r\n//   constructor(props:MyProps){\r\n//     super(props)\r\n//     this.state={\r\n//       data: {\r\n//           selected: 0,\r\n//           color: \"#7A7E83\",\r\n//           selectedColor: \"#3cc51f\",\r\n//           list: [{\r\n//             pagePath: \"/pages/meditation/index\",\r\n//             iconPath: meditationPng,\r\n//             selectedIconPath: \"/image/icon_component_HL.png\",\r\n//             text: \"冥想\"\r\n//           }, {\r\n//             pagePath: \"/pages/exercise/index\",\r\n//             iconPath: exercisePng,\r\n//             selectedIconPath: \"/image/icon_API_HL.png\",\r\n//             text: \"锻炼\"\r\n//           }, {\r\n//             pagePath: \"/pages/brain/index\",\r\n//             iconPath: brainPng,\r\n//             selectedIconPath: \"/image/icon_API_HL.png\",\r\n//             text: \"大脑\"\r\n//           }, {\r\n//             pagePath: \"/pages/community/index\",\r\n//             iconPath: communityPng,\r\n//             selectedIconPath: \"/image/icon_API_HL.png\",\r\n//             text: \"社区\"\r\n//           }, {\r\n//             pagePath: \"/pages/mine/index\",\r\n//             iconPath: minePng,\r\n//             selectedIconPath: '../asset/mine.png',\r\n//             text: \"我的\"\r\n//           }]\r\n//         },\r\n//     }\r\n// }\r\n\r\n//   componentWillMount () { }\r\n\r\n//   componentDidMount () { }\r\n\r\n//   componentWillUnmount () { }\r\n\r\n//   componentDidShow () { }\r\n\r\n//   componentDidHide () { }\r\n\r\n\r\n\r\n\r\n//   render () {\r\n//     const {data:{list, selectedColor, color}} = this.state;\r\n//     const {pageIndex} = this.props\r\n//     console.log('+++++++++++')\r\n//     console.log(pageIndex)\r\n//   return (\r\n//       <CoverView className=\"tab-bar\">\r\n//           <CoverView className=\"tab-bar-border\"></CoverView>\r\n  \r\n//           {list.map((item,index)=>(\r\n//               <CoverView key={item.pagePath} className=\"tab-bar-item\" data-path={item.pagePath} data-index={index} onClick={this.switchTab}>\r\n//                   <CoverImage  className={pageIndex === index ? 'text-select' : ''}  src={item.iconPath}></CoverImage>\r\n//                   <CoverView style={{color:(pageIndex === index ? selectedColor : color)}}>{item.text}</CoverView>\r\n//               </CoverView>\r\n//           ))}\r\n//       </CoverView>\r\n//     )\r\n// }\r\n\r\n\r\n// }\r\n\r\n// const mapStateToProps = (state) => {\r\n//   return {\r\n//     pageIndex: state.global.global.pageIndex,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return bindActionCreators(\r\n//       {\r\n//           ...actions\r\n//       },\r\n//       dispatch\r\n//   );\r\n// };\r\n\r\n//  connect(\r\n//   mapStateToProps,\r\n//   mapDispatchToProps\r\n// )(Indexs);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {GLOBAL} from '../../constants/global'\r\n\r\n\r\nexport const setIndex = (index:number) => {\r\n    return {\r\n      type: GLOBAL.PAGEINDEX,\r\n      index\r\n    }\r\n  }\r\n\r\n  export const getIndex = (index:number) => {\r\n    return {\r\n      type: GLOBAL.GETPAGEINDEX,\r\n      index\r\n    }\r\n  }","export default __webpack_public_path__ + \"asset/brain.png\";","export default __webpack_public_path__ + \"asset/community.png\";","export default __webpack_public_path__ + \"asset/exercise.png\";","export default __webpack_public_path__ + \"asset/meditation.png\";","export default __webpack_public_path__ + \"asset/mine.png\";","// extracted by mini-css-extract-plugin","import { createComponentConfig } from '@tarojs/runtime'\nimport component from \"../../node_modules/babel-loader/lib/index.js!./index.tsx\"\nvar inst = Component(createComponentConfig(component, 'custom-tab-bar/index'))\n\n"],"sourceRoot":""}